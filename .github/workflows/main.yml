name: interview-server

on:
  push:
    branches: ["main"]
    paths:
      - "**"
      - "!ml-server/**"

jobs:
  build-and-push-arm64:
    runs-on: ubuntu-24.04-arm

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push with cache
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/interview:arm64
            ${{ secrets.DOCKERHUB_USERNAME }}/interview:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push-arm64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: 확인 - 현재 파일 구조 보기 (디버깅용)
        run: |
          echo "📂 현재 디렉토리: $(pwd)"
          echo "📄 포함된 파일들:"
          find . -type f

      - name: Send files to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "nginx.conf, docker-compose.yml"
          target: /home/ubuntu/interview
          overwrite: true
          debug: true

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd /home/ubuntu/interview
            echo "🔧 환경변수 생성중"
            sudo su
            docker system prune -f
            echo "NODE_ENV=${{ secrets.NODE_ENV }}" >> .env
            echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            echo "DB_CONNECTION=${{ secrets.DB_CONNECTION }}" >> .env
            echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
            echo "GOOGLE_CLIENT_ID=${{secrets.GOOGLE_CLIENT_ID}}" >> .env
            echo "GOOGLE_CLIENT_SECRET=${{secrets.GOOGLE_CLIENT_SECRET}}" >> .env
            echo "GOOGLE_OAUTH_CALLBACK_URL=${{secrets.GOOGLE_OAUTH_CALLBACK_URL}}" >> .env
            echo "JWT_SECRET=${{secrets.JWT_SECRET}}" >> .env
            echo "JWT_REFRESH_SECRET=${{secrets.JWT_REFRESH_SECRET}}" >> .env
            echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> .env
            echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> .env

            echo "OCI_TENANCY_OCID=${{secrets.OCI_TENANCY_OCID}}" >> .env
            echo "OCI_USER_OCID=${{secrets.OCI_USER_OCID}}" >> .env
            echo "OCI_FINGERPRINT=${{secrets.OCI_FINGERPRINT}}" >> .env
            echo "OCI_PRIVATE_KEY=${{secrets.OCI_PRIVATE_KEY}}" >> .env
            echo "OCI_REGION=${{ secrets.OCI_REGION }}" >> .env
            echo "OCI_BUCKET_NAME=${{ secrets.OCI_BUCKET_NAME }}" >> .env
            echo "PY_TEST=${{ secrets.PY_TEST }}" >> .env
            echo "PINECONE_API_KEY=${{ secrets.PINECONE_API_KEY }}" >> .env
            echo "PINECONE_INDEX_NAME=${{ secrets.PINECONE_INDEX_NAME }}" >> .env
            echo "WEAVIATE_API_KEY=${{ secrets.WEAVIATE_API_KEY }}" >> .env
            echo "WEAVIATE_URL=${{ secrets.WEAVIATE_URL }}" >> .env

            echo "🚀 배포 시작..."
            docker-compose down
            docker-compose pull
            docker-compose up -d --build
            echo "✅ 배포 완료!"
