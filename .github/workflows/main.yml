name: interview-server
on:
  push:
    branches: ["main"]
    paths:
      - "**"
jobs:
  build-and-push-arm64:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_TOKEN}}

      - name: Build and push with cache
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/arm64
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/interview:arm64
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/interview:cache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/interview:cache,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push-arm64
    steps:
      - name: Show files (for debugging)
        run: |
          echo "📂 현재 작업 디렉토리:"
          pwd
          echo "📄 현재 포함된 파일들:"
          find . -type f

      - name: Send files
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "./nginx.conf, ./docker-compose.yml"
          target: /home/ubuntu/interview
          overwrite: true
          debug: true

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd /home/ubuntu/interview
            sudo su
            docker system prune -f
            echo "NODE_ENV=${{ secrets.NODE_ENV }}" >> .env
            echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            echo "DB_CONNECTION=${{ secrets.DB_CONNECTION }}" >> .env
            echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
            docker-compose pull
            docker-compose up -d --build
